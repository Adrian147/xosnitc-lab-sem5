// Calculating the Physical SP address
alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

// Extracting System Call Number
alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

//Common to both methods
//Setting the PPOFT in the PCB
alias currentPID S7;
currentPID = (PTBR - 1024) / 8;

// Calculating PCB entry for currentPID
alias currentPCB S8;
currentPCB = READY_LIST + 32 * currentPID;

//Open Syscall
if ( sysCallNo == 2) then
	alias fileName S3;
	fileName = [physicalSP - 3];
	
	//checking FAT for the filename
	alias i S4;
	i = 0;
	while (i < 64) do
        if ([FAT + 8 * i] == fileName) then
           //Condition met if filename is found in FAT
           break;
        endif;
        
        i = i + 1;
    endwhile;
    
    //if file doesn't exist
    if (i == 64) then
	    [physicalSP - 2] = -1;
	    ireturn;
    endif;
    
    alias FAT_entry S5;
	FAT_entry = i;
	
	//Searching System Wide Open File Table for the FAT entry
	i = 0;
	while (i < 64) do
	    if ([FILE_TABLE + i * 2] == FAT_entry) then
	        break;
	    endif;
	    i = i + 1;
	endwhile;
	
	//if found, saving the entry
	alias ft_entry S6;
	if (i != 64) then
	    ft_entry = i;
	endif;
	
	//else, searching for a free entry
	if (i == 64) then
	    i = 0;
	    while (i < 64) do
	        if ([FILE_TABLE + i * 2] == -1) then
	            break;
	        endif;
	        i = i + 1;
	    endwhile; 
	endif;
	
	//If no free entry available
	if (i == 64) then
	    [physicalSP - 2] = -1;
        ireturn;
	endif;
	
	ft_entry = i;
    
    //Looking for a free entry in PPOFT
    i = 0;
    while (i < 8) do
        if ([currentPCB + 15 + i * 2] == -1) then
            break;
        endif;
        i = i + 1;
    endwhile;
    
    // If No free entries    
    if (i == 8) then
        [physicalSP - 2] = -1;
        ireturn;
    endif;
    
    //Setting File Table Entry in the Perprocess Table
    [currentPCB + 15 + i * 2] = ft_entry;
    [currentPCB + 16 + i * 2] = 0;
    
    //Setting the File Table Entry
    [FILE_TABLE + ft_entry * 2] = FAT_entry;
    [FILE_TABLE + ft_entry * 2 + 1] = [FILE_TABLE + ft_entry * 2 + 1] + 1;
    
    //Returning the PPOFT entry
    [physicalSP - 2] = i;
    ireturn;
endif;

//Close Syscall
if ( sysCallNo == 3) then
	alias fileDesc S3;
	fileDesc = [physicalSP - 3];

    //Checking if valid fileDesc
    if (fileDesc < 0 || fileDesc > 7) then
        [physicalSP - 2] = -1;
        ireturn;
    endif;
	
	//Looking though PPOFT for for File Table Entry
	
	// if entry is invalid
	if ([currentPCB + 15 + fileDesc * 2] == -1) then
	    [physicalSP - 2] = -1;
        ireturn;
	endif;
	
	alias ft_entry S6;
	ft_entry =  [currentPCB + 15 + fileDesc * 2];
	
	//Modifying the File Table on close.
	//Decrementing the count value
	[FILE_TABLE + ft_entry * 2 + 1] = [FILE_TABLE + ft_entry * 2 + 1] - 1;
	 
	//Invalidating the File Table entry if not processes are using it.
	if ([FILE_TABLE + ft_entry * 2 + 1] == 0) then
	    [FILE_TABLE + ft_entry * 2] = -1;
	endif;
	
	//Invalidating the PPOFT entry
	[currentPCB + 15 + fileDesc * 2] = -1;
	[currentPCB + 16 + fileDesc * 2] = -1;
	
	//Returning 0 for success
    [physicalSP - 2] = 0;
    ireturn;
endif;

[physicalSP - 2] = -1;
ireturn;
