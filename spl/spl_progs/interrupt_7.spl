// Calculating PID
alias currentPID S0;
currentPID = (PTBR - 1024) / 8;

// Calculating PCB entry for currentPID
alias currentPCB S1;
currentPCB = READY_LIST + 32 * currentPID;

[currentPCB + 1] = 0;

// Looking to the next available process
alias newPID S2;
newPID = currentPID + 1;
alias newPCB S3;

while 1 do
    newPCB = READY_LIST + 32 * newPID;
    if [newPCB + 1] == 1 then
        break;
    else 
        newPID = (newPID + 1) % 32;
        if newPID == currentPID then
            halt;
        endif;
    endif;
endwhile;

//Loading Registers from the PCB
//Settign BP, SP from PCB entry
BP = [newPCB + 2];
SP = [newPCB + 3];

// Setting Page Table Base and Length Registers
PTBR = [newPCB + 5]; 
PTLR = [newPCB + 6];

// Setting Program Registers
R0 = [newPCB +  7];
R1 = [newPCB +  8];
R2 = [newPCB +  9];
R3 = [newPCB + 10];
R4 = [newPCB + 11];
R5 = [newPCB + 12];
R6 = [newPCB + 13];
R7 = [newPCB + 14];

// Setting IP into top of SP stack
SP = SP + 1;
alias newphysicalSP S5;
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[newphysicalSP] = [newPCB + 4];

// Set STATE for newPID to Running
[newPCB + 1] = 2;

// Returning control to current process
ireturn;
