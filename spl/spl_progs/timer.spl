// Calculating PID
alias currentPID S0;
currentPID = (PTBR - 1024) / 8;

// Calculating PCB entry for currentPID
alias currentPCB S1;
currentPCB = READY_LIST + 32 * currentPID;

// Set STATE for currentPID to READY
[currentPCB + 1] = 1;

//Save BP, SP to PCB entry
[currentPCB + 2] = BP;
[currentPCB + 3] = SP - 1; 

//Calculating Physical Addr to IP entry
alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 

// Saving the IP value of the current PID
[currentPCB + 4] = [physicalSP];

//Saving PTBR and PTLR
[currentPCB + 5] = PTBR;
[currentPCB + 6] = PTLR;

//Saving Program Registers
[currentPCB +  7] = R0;
[currentPCB +  8] = R1;
[currentPCB +  9] = R2;
[currentPCB + 10] = R3;
[currentPCB + 11] = R4;
[currentPCB + 12] = R5;
[currentPCB + 13] = R6;
[currentPCB + 14] = R7;

// Finding the next Ready Process
alias newPID S3;
alias newPCB S4;

//Proper Round Robin Code cycling through all processes
newPID = (currentPID + 1) % 32;
while 1 do
    newPCB = READY_LIST + 32 * newPID;
    if [newPCB + 1] == 1 then
        break;
    else 
        newPID = (newPID + 1) % 32;
    endif;
endwhile;

//Loading Registers from the PCB
//Settign BP, SP from PCB entry
BP = [newPCB + 2];
SP = [newPCB + 3];

// Setting Page Table Base and Length Registers
PTBR = [newPCB + 5]; 
PTLR = [newPCB + 6];

// Setting Program Registers
R0 = [newPCB +  7];
R1 = [newPCB +  8];
R2 = [newPCB +  9];
R3 = [newPCB + 10];
R4 = [newPCB + 11];
R5 = [newPCB + 12];
R6 = [newPCB + 13];
R7 = [newPCB + 14];

// Setting IP into top of SP stack
SP = SP + 1;
alias newphysicalSP S5;
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[newphysicalSP] = [newPCB + 4];

// Set STATE for newPID to Running
[newPCB + 1] = 2;

// Returning control to current process
ireturn;
